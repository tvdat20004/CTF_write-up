from Crypto.Util.number import long_to_bytes

def decrypt(q, h, f, g, e):
    a = (f*e) % q
    m = (a*inverse_mod(f, g)) % g
    return m

def gauss(v1, v2):
    while True:
        if v2.norm() < v1.norm():
            v1, v2 = v2, v1
        m = round(v1*v2/(v1*v1))
        if m == 0:
            return v1, v2
        v2 = v2-m*v1

h, q = (155792966428403363929537556152773095633228860866508954043884439196215651851719421818702810628585333574434221848355608274391090885346948876945385699930366955143178734108019680563423281418301149295683146473308067348511334732039637693316610409524380016373102954748834984319150330685348842090356021180522074173952, 160572195918365791817905946398680837634166758624975870369793475797372993426661566789656496636752859301886314534722235195686348401902334189668617541023264534645944695002695651427191072115496548990885652599453953552093566794132701811062702353860068408118098254084367250464117497864622480179359223671899418452099)
enc_flag = 25917095464921448726977747289311547049750142083330919984967995064297317682012999395296513957490551877577017642074193290542477397200737320618887003157082588924771412446996446282719687641049635556668256474257582035686028576240198389965388973367050887531249589654526594700506526099871477353845574559563603129063

g = gauss(vector([q,1]),vector([h,1]))[0][0]
F = IntegerModRing(q)
f = int(g / F(h))
print(long_to_bytes(decrypt(q,h,f,g,enc_flag)))
# Flag{wh0_th1nk5_w3_g0t_l1nAlg_h3r3?}