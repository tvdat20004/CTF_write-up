from sage.all import *
from Crypto.Util.number import long_to_bytes
from pwn import xor
import hashlib
import itertools

n = 100
p = [50, 25, 40, 98, 35, 87, 54, 16, 65, 60, 95, 20, 4, 79, 69, 15, 53, 26, 92, 87, 48, 56, 99, 83, 2, 56, 47, 59, 42, 3, 19, 53]
q = [5, 24, 6, 21, 6, 28, 20, 48, 15, 18, 18, 8, 47, 22, 22, 3, 14, 40, 18, 26, 4, 31, 11, 16, 8, 46, 45, 23, 17, 39, 24, 21, 50, 25, 40, 98, 35, 87, 54, 16, 65, 60, 95, 20, 4, 79, 69, 15, 53, 26, 92, 87, 48, 56, 99, 83, 2, 56, 47, 59, 42, 3, 19, 53, -21, -24, -39, -17, -23, -45, -46, -8, -16, -11, -31, -4, -26, -18, -40, -14, -3, -22, -22, -47, -8, -18, -18, -15, -48, -20, -28, -6, -21, -6, -24, -5]
c1 = [93, 84, 92, 90, 63, 63, 76, 60, 61, 57, 99, 62, 55, 91, 95, 62, 59, 54, 91, 69, 55, 60, 96, 74, 78, 55, 78, 64, 61, 54, 76, 84, 50, 25, 40, 98, 35, 87, 54, 16, 65, 60, 95, 20, 4, 79, 69, 15, 53, 26, 92, 87, 48, 56, 99, 83, 2, 56, 47, 59, 42, 3, 19, 53, -84, -76, -54, -61, -64, -78, -55, -78, -74, -96, -60, -55, -69, -91, -54, -59, -62, -95, -91, -55, -62, -99, -57, -61, -60, -76, -63, -63, -90, -92, -84, -93]
d = 2315157014596884429538745310505697576231247890652617038454441871904638642633138761681911931668903937398814215580589949726790160298882443329224130590117763020425392822361299940434853674756207376179949432149288134358028

Bn = BraidGroup(n)
gs = Bn.gens()
p = Bn(p)
q = Bn(q)
c1 = Bn(c1)
factors = [i - 1 for i in p.Tietze()]
x1 = gs[0] / gs[0]
x2 = gs[0] / gs[0]
cnt = 0
for i in factors:
    if i < (n // 2) - 1:
        x1 *= gs[i]
    elif i >= (n // 2) + 1:
        x2 *= gs[i]
    else:
        cnt += 1
z = gs[n//2 - 1] ** cnt 
print(x1)
print(x2)
print(z)
print(x1 * x2 * z == p)
r1 = q * z**-1 * x2**-1
r2 = x1**-1 * c1 * z**-1 
r = r1 * r2 * z 
assert r == q * p**-1 * c1
h = hashlib.sha512(str(prod(r.right_normal_form())).encode()).digest()
print(h.hex())
d_str = long_to_bytes(d).decode('utf-8')
print(d_str)
msg = ''.join(chr(ord(char) ^ h) for char, h in zip(d_str, h))
print(msg)




