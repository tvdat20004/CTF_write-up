

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_9722343735487336242847355367175705096672092545117029199851527087227001665095112331406581010290318957921703096325328326862768861459201224096506317060919486835667369908780262880850949861734346363939614200227301344831209845565227637590016962469165064818450385339408084789219460490771570003649248250098125549751883777385917121014908647963900636814694225913533250242569263841750262192296795919177720443516042006972193940464844059718044438878017817432336475087436031866077325402373438547950481634275773767410248698596974769981162966656910136575149455523084473445761780201089182021418781347413453726696240548842411960178397 = Integer(9722343735487336242847355367175705096672092545117029199851527087227001665095112331406581010290318957921703096325328326862768861459201224096506317060919486835667369908780262880850949861734346363939614200227301344831209845565227637590016962469165064818450385339408084789219460490771570003649248250098125549751883777385917121014908647963900636814694225913533250242569263841750262192296795919177720443516042006972193940464844059718044438878017817432336475087436031866077325402373438547950481634275773767410248698596974769981162966656910136575149455523084473445761780201089182021418781347413453726696240548842411960178397); _sage_const_5323153428600607366474827268153522064873 = Integer(5323153428600607366474827268153522064873); _sage_constntegersage_const_27203100406560381632094006926903753857553395157680133688133088561775139188704414077278965969307544535945156850786509365882724900390893075998971604081115196824585813017775953048912421386424701714952968924065123981186929525951094688699758239739587719869990140385720389865 = Integer(27203100406560381632094006926903753857553395157680133688133088561775139188704414077278965969307544535945156850786509365882724900390893075998971604081115196824585813017775953048912421386424701714952968924065123981186929525951094688699758239739587719869990140385720389865); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_892 = Integer(892); _sage_const_1364278824202792998093019636227517188336 = Integer(1364278824202792998093019636227517188336); _sage_const_2238131335516129175817357831521181270929 = Integer(2238131335516129175817357831521181270929); _sage_const_5 = Integer(5); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4)
n = _sage_const_9722343735487336242847355367175705096672092545117029199851527087227001665095112331406581010290318957921703096325328326862768861459201224096506317060919486835667369908780262880850949861734346363939614200227301344831209845565227637590016962469165064818450385339408084789219460490771570003649248250098125549751883777385917121014908647963900636814694225913533250242569263841750262192296795919177720443516042006972193940464844059718044438878017817432336475087436031866077325402373438547950481634275773767410248698596974769981162966656910136575149455523084473445761780201089182021418781347413453726696240548842411960178397 
e = _sage_const_5323153428600607366474827268153522064873 
c = _sage_const
hint = _sage_const_27203100406560381632094006926903753857553395157680133688133088561775139188704414077278965969307544535945156850786509365882724900390893075998971604081115196824585813017775953048912421386424701714952968924065123981186929525951094688699758239739587719869990140385720389865 
from Crypto.Util.number import long_to_bytes
import itertools

def small_roots(f, bounds, m=_sage_const_1 , d=None):
    if not d:
        d = f.degree()

    R = f.base_ring()
    N = R.cardinality()
    
    k = ZZ(f.coefficients().pop(_sage_const_0 ))
    g = gcd(k, N)
    k = R(k/g)

    f *= _sage_const_1 /k
    f = f.change_ring(ZZ)

    vars = f.variables()
    G = Sequence([], f.parent())
    for k in range(m):
        for i in range(m-k+_sage_const_1 ):
            for subvars in itertools.combinations_with_replacement(vars[_sage_const_1 :], i):
                g = f**k * prod(subvars) * N**(max(d-k, _sage_const_0 ))
                G.append(g)

    B, monomials = G.coefficient_matrix()
    monomials = vector(monomials)

    factors = [monomial(*bounds) for monomial in monomials]
    for i, factor in enumerate(factors):
        B.rescale_col(i, factor)

    B = B.dense_matrix().LLL()
    B = B.change_ring(QQ)
    for i, factor in enumerate(factors):
        B.rescale_col(i, Integer(_sage_const_1 )/factor)

    H = Sequence([], f.parent().change_ring(QQ))
    for h in filter(None, B*monomials):
        H.append(h)
        I = H.ideal()
        if I.dimension() == -_sage_const_1 :
            H.pop()
        elif I.dimension() == _sage_const_0 :
            roots = []
            for root in I.variety(ring=ZZ):
                root = tuple(R(root[var]) for var in f.variables())
                roots.append(root)
            return roots

    return []

PR = PolynomialRing(Zmod(n), _sage_const_2 , names=('x', 'k',)); (x, k,) = PR._first_ngens(2)
f = _sage_const_1  - k - (hint + x*_sage_const_2 **_sage_const_892 ) * e
# for d in range(10):
# 	for m in range(10):
# 		print(f"{m=}")
# 		print(f"{d=}")
# 		r = small_roots(f, [2**(1024-892), e], m=m, d=d)
# 		print(r)
# 		# p = gcd(int(f(x, k)), n)
# 		# q = int(n) // int(p)
# 		# d = pow(e, -1, (p-1)*(q-1))
# 		# m = pow(c, int(d), n)
# 		# print(long_to_bytes(int(m)))
# 		# break
x,k = (_sage_const_1364278824202792998093019636227517188336 , _sage_const_2238131335516129175817357831521181270929 )

p = gcd(int(f(x, k)), n)
q = int(n) // int(p)
print(p)
print(q)
c = pow(c,(p-_sage_const_1 )*(q-_sage_const_1 ), n**_sage_const_5 )

Rp = Zp(p, _sage_const_5 )
Rq = Zp(q, _sage_const_5 )
ap = (Rp(c).log() / Rp(_sage_const_3 ).log()).lift()
aq = (Rq(c).log() / Rq(_sage_const_3 ).log()).lift()
odp = p-_sage_const_1 
R = Zmod(p**_sage_const_5 )
a_mod_odp = discrete_log(R(c) ** (p**_sage_const_4 ), R(_sage_const_3 ) ** (p**_sage_const_4 ), ord=ZZ(odp))
odq = q-_sage_const_1 
R = Zmod(q**_sage_const_5 )
a_mod_odq = discrete_log(R(c) ** (q**_sage_const_4 ), R(_sage_const_3 ) ** (q**_sage_const_4 ), ord=ZZ(odq))
a = int(crt([ap, aq, a_mod_odp, a_mod_odq], [p**_sage_const_4 , q**_sage_const_4 , odp, odq]))
assert pow(_sage_const_3 , a, n**_sage_const_5 ) == c

