

# This file was *autogenerated* from the file a.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_521 = Integer(521); _sage_const_5437994412763609312287807471880072729673281757441094697938294966650919649177305854023158593494881613184278290778097252426658538133266876768217809554790925406 = Integer(5437994412763609312287807471880072729673281757441094697938294966650919649177305854023158593494881613184278290778097252426658538133266876768217809554790925406); _sage_const_22 = Integer(22); _sage_const_8 = Integer(8); _sage_const_14 = Integer(14)
import itertools
from sage.all import * 
def small_roots(f, bounds, m=_sage_const_1 , d=None):
	if not d:
		d = f.degree()

	if isinstance(f, Polynomial):
		x, = polygens(f.base_ring(), f.variable_name(), _sage_const_1 )
		f = f(x)

	R = f.base_ring()
	N = R.cardinality()
	
	f /= f.coefficients().pop(_sage_const_0 )
	f = f.change_ring(ZZ)

	G = Sequence([], f.parent())
	for i in range(m+_sage_const_1 ):
		base = N**(m-i) * f**i
		for shifts in itertools.product(range(d), repeat=f.nvariables()):
			g = base * prod(map(power, f.variables(), shifts))
			G.append(g)

	B, monomials = G.coefficient_matrix()
	monomials = vector(monomials)

	factors = [monomial(*bounds) for monomial in monomials]
	for i, factor in enumerate(factors):
		B.rescale_col(i, factor)

	B = B.dense_matrix().LLL()

	B = B.change_ring(QQ)
	for i, factor in enumerate(factors):
		B.rescale_col(i, _sage_const_1 /factor)

	H = Sequence([], f.parent().change_ring(QQ))
	for h in filter(None, B*monomials):
		H.append(h)
		I = H.ideal()
		if I.dimension() == -_sage_const_1 :
			H.pop()
		elif I.dimension() == _sage_const_0 :
			roots = []
			for root in I.variety(ring=ZZ):
				root = tuple(R(root[var]) for var in f.variables())
				roots.append(root)
			return roots
	return []
from Crypto.Util.number import * 

p = ~-(-~(()==()))** _sage_const_521 
cake = _sage_const_5437994412763609312287807471880072729673281757441094697938294966650919649177305854023158593494881613184278290778097252426658538133266876768217809554790925406 
P = PolynomialRing(Zmod(p), names=('x', 'y',)); (x, y,) = P._first_ngens(2)
x0 = bytes_to_long(b'potluck{' + (_sage_const_22 -_sage_const_8 )*b'\0')
f = (x + x0) + y - (x+x0)*y*cake 
upper_boundX = bytes_to_long(_sage_const_14 *b'\xff')
upper_boundY = bytes_to_long(_sage_const_22 *b'\xff')

root = small_roots(f, (upper_boundX, upper_boundY))
print(root)
for r in root:
	flag = long_to_bytes((int(r[_sage_const_0 ] + x0))) + long_to_bytes(int(r[_sage_const_1 ]))
	print(flag)

