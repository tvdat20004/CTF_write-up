from sage.all import * 
from Crypto.Util.number import long_to_bytes
n = 301929748923678449872944933611657670834216889867340028357609265175830693931365828840717548752313862343315133541384709574659039910206634528428504034051556622114290811586746168354731258756502196637977942743110508997919976400864419640496894428180120687863921269087080600917900477624095004141559042793509244689248253036809126205146653922738685595903222471152317095497914809983689734189245440774658145462867680027337
c = 104375152140523502741159687674899095271676058870899569351687154311685938980840028326701029233383897490722759532494438442871187152038720886122756131781086198384270569105043114469786514257765392820254951665751573388426239366215033932234329514161827069071792449190823827669673064646681779764841034307000600929149689291216313319444583032339045277433847691961234044840927155960887984372868669401051358701522484473320
def recover_poly(n, base):
	coeffs = [] 
	while n > 0:
		coeffs.append(n % base)
		n //= base 
	return coeffs

P = PolynomialRing(ZZ, 'x')
x = P.gen()
m = 2 
while True:
	poly = P(recover_poly(n, m))
	factors = list(factor(poly))
	if len(factors) >= 3:
		print(m)
		print(factors)
		break
	m += 1
p1, p2, p3 = factors[0][0](m), factors[1][0](m), factors[2][0](m)
assert is_prime(p1) and is_prime(p2) and is_prime(p3)
z = 1
phi = (p1-1)*(p2-1)*(p3-1)
while True:
	e = m**3 + z - 2
	if gcd(e, phi) == 1:
		d = pow(e, -1, phi)
		pt = long_to_bytes(pow(c, int(d), n))
		if b'CCTF{' in pt:
			print(pt)
			break
	z += 1
# CCTF{nUmb3r5_1N_D!fFerEn7_8As35_4r3_n!cE!?}