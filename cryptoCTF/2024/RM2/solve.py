from Crypto.Util.number import * 
from pwn import * 

# def gen():
# 	while True:
# 		q = getPrime(1023)
# 		p = 2*q + 1 
# 		# print(p.bit_length())
# 		pp = 2*p + 1 
# 		if isPrime(p) and isPrime(pp) and p.bit_length()==1024:
# 			return p  
# print(gen())
# print(gen())
# output from gen()
p = 129999898061337196621591094282073139162372325733568583637461176399373739452719900768002710844741246691149447311048639311878645284562904962002857997641604380588370320837523343342298988934282698490922507179875191225343041264777449578828059667719626074952454570185491485509459394260364465847345661168599608058843
q = 160432878912701081699688672869499623911414201718297215263336972932221990629283775576774388958013909878228948103515347015593953673850104448949517354256623367777218117726084650682802594890064150936214294125269097581615994564539062692376936322673244712882274715965370180300086711529417780435448927514054436002899
phi1 = 2 * ((p-1)//2 - 1)*((q-1)//2 - 1)
phi2 = 4*p*q 
r = remote("01.cr.yp.toc.tf", 13371)
r.sendlineafter(b'p, q:\n', (str(p) + ',' + str(q)).encode())
c1 = int(r.recvlineS().strip().split('=')[1])
c2 = int(r.recvlineS().strip().split('=')[1])
m1 = long_to_bytes(pow(c1, pow(65537, -1, phi1),(p - 1) * (q - 1)))
m2 = long_to_bytes(pow(c2, pow(65537, -1, phi2),(2*p + 1) * (2*q + 1)))
r.sendlineafter(b'get the flag: \n', m1+m2)
r.interactive()