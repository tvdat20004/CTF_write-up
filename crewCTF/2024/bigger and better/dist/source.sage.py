

# This file was *autogenerated* from the file source.sage
from sage.all_cmdline import *   # import sage library

_sage_const_150 = Integer(150); _sage_const_5 = Integer(5); _sage_const_25 = Integer(25); _sage_const_3 = Integer(3); _sage_const_256 = Integer(256); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_16 = Integer(16)
from Crypto.Util.number import getPrime, long_to_bytes, bytes_to_long
from secrets import randbelow, choice
from hashlib import sha256
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from string import ascii_letters, digits
# from flag import flag
flag = b'crew{test_flag_232100291221321000}'

key = "".join([choice(ascii_letters + digits) for i in range(_sage_const_150 )]).encode()

blocklen = len(key)//_sage_const_5 
polsize = _sage_const_25 
maxexp = _sage_const_3 

V, W, X, Y, Z = [bytes_to_long(b) for b in [key[blocklen*i:blocklen*i+blocklen] for i in range(_sage_const_5 )]]

# n = getPrime(4096)*getPrime(4096)*getPrime(4096)*getPrime(4096)
# n = n^2
n = getPrime(_sage_const_256 )**_sage_const_2 
K = Zmod(n)
PP = PolynomialRing(K, names=('v', 'w', 'x', 'y', 'z',)); (v, w, x, y, z,) = PP._first_ngens(5)

coeffs = [K.random_element() for i in range(polsize)]
print(coeffs)
pol = _sage_const_0 
for l in range(polsize):
    while True:
        i, j, k, s, t = [randbelow(maxexp) for _ in range(_sage_const_5 )]
        if i == j == k == s == t == _sage_const_0 : continue
        pol = pol + coeffs[l] * v**i * w**j * x**k * y**s * z**t
        if len(pol.coefficients()) == l + _sage_const_1 :
            print(pol)
            break

c = pol(V, W, X, Y, Z)
pol = pol - c
assert pol(V, W, X, Y, Z) == _sage_const_0 

key = sha256(key).digest()
cipher = AES.new(key, AES.MODE_ECB)
c = cipher.encrypt(pad(flag, _sage_const_16 )).hex()

with open("output1.txt", "w") as f:
    f.write(f"{blocklen = }\n")
    f.write(f"{n = }\n")
    f.write(f"{pol = }\n")
    f.write(f"{c = }\n")




