

# This file was *autogenerated* from the file server.sage
from sage.all_cmdline import *   # import sage library

_sage_const_100 = Integer(100); _sage_const_5 = Integer(5); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_64 = Integer(64); _sage_const_255 = Integer(255)#!/usr/bin/sage

import sys
print("I caught a monkfish in the sea! ")
sys.stdout.flush()

from hashlib import sha256
from Crypto.Util.number import bytes_to_long
from random import SystemRandom
import ast

n = _sage_const_100 
m = _sage_const_100 
q = _sage_const_5 
FF = GF(q, names=('x',)); (x,) = FF._first_ngens(1)


def apply(F, v):
    out = []
    for i in range(m):
        out.append((v.T * F[i] * v)[_sage_const_0 , _sage_const_0 ])
    return matrix(FF, m, _sage_const_1 , out)

def apply_verif_info(F, a, b):
    out = []
    for i in range(m):
        out.append((a.T * (F[i] + F[i].T) * b)[_sage_const_0 , _sage_const_0 ])
    return matrix(FF, m, _sage_const_1 , out)

def create_pok(v, s, F):
    t = matrix(FF, n, _sage_const_1 , [FF.random_element() for i in range(n)])

    com = apply(F, t)
    verif = apply_verif_info(F, t, s)
    a = list(FF)[sha256(bytes([list(FF).index(i[_sage_const_0 ]) for i in list(com) + list(v) + list(verif)])).digest()[_sage_const_0 ] % len(list(FF))]
    a = _sage_const_0 
    return (com, t - a * s, verif)

def verif_pok(v, F, pi):
    com = pi[_sage_const_0 ]
    resp = pi[_sage_const_1 ]
    verif = pi[_sage_const_2 ]

    a = list(FF)[sha256(bytes([list(FF).index(i[_sage_const_0 ]) for i in list(com) + list(v) + list(verif)])).digest()[_sage_const_0 ] % len(list(FF))]
    out1 = apply(F, resp)
    out2 = com + (a * a) * v - a * verif
    return out1 == out2

rng = SystemRandom()
gen_seed = []

for i in range(_sage_const_64 ):
    gen_seed.append(rng.randint(_sage_const_0 , _sage_const_255 ))

init_seed = gen_seed
gen_seed = bytes(gen_seed)

F = []

for i in range(m):
    cur = []
    for j in range(n):
        cur.append([])
        for k in range(n):
            cur[-_sage_const_1 ].append(list(FF)[sha256(gen_seed).digest()[_sage_const_0 ] % _sage_const_5 ])
            gen_seed = sha256(gen_seed).digest()
    F.append(matrix(FF, n, n, cur))

s = random_matrix(FF, n, _sage_const_1 )

v = apply(F, s)

pok = create_pok(v, s, F)
# assert verif_pok(v, F, pok)

print("m0 =", [list(FF).index(i[_sage_const_0 ]) for i in list(pok[_sage_const_0 ])])
print("m1 =", [list(FF).index(i[_sage_const_0 ]) for i in list(pok[_sage_const_1 ])])
print("m2 =", [list(FF).index(i[_sage_const_0 ]) for i in list(pok[_sage_const_2 ])])
print(list(s))
print("Can you catch a monkfish? ")
print("seed =", [int(i) for i in init_seed])
print("v =", [list(FF).index(i[_sage_const_0 ]) for i in v])
m0 = [int(i) for i in ast.literal_eval(input("m0 = "))]
m1 = [int(i) for i in ast.literal_eval(input("m1 = "))]
m2 = [int(i) for i in ast.literal_eval(input("m2 = "))]

assert(m0 != [list(FF).index(i[_sage_const_0 ]) for i in list(pok[_sage_const_0 ])])
assert(m1 != [list(FF).index(i[_sage_const_0 ]) for i in list(pok[_sage_const_1 ])])
assert(m2 != [list(FF).index(i[_sage_const_0 ]) for i in list(pok[_sage_const_2 ])])

m0 = matrix(FF, m, _sage_const_1 , [list(FF)[i] for i in m0])
m1 = matrix(FF, n, _sage_const_1 , [list(FF)[i] for i in m1])
m2 = matrix(FF, m, _sage_const_1 , [list(FF)[i] for i in m2])
pi = (m0, m1, m2)

res = verif_pok(v, F, pi)
if res:
    print("fuhudshfudhsufhdsu")
else:
    print("ngu")
# with open("flag.txt", "r") as f:
#     print(f.read())

