from sage.all import * 
from hashlib import sha256
from Crypto.Util.number import long_to_bytes
from Crypto.Cipher import AES
A = (6174416269259286934151093673164493189253884617479643341333149124572806980379124586263533252636111274525178176274923169261099721987218035121599399265706997 , 2456156841357590320251214761807569562271603953403894230401577941817844043774935363309919542532110972731996540328492565967313383895865130190496346350907696)
B = (4226762176873291628054959228555764767094892520498623417484902164747532571129516149589498324130156426781285021938363575037142149243496535991590582169062734 , 425803237362195796450773819823046131597391930883675502922975433050925120921590881749610863732987162129269250945941632435026800264517318677407220354869865)
ciphertext = b'V\x1b\xc6&\x04Z\xb0c\xec\x1a\tn\xd9\xa6(\xc1\xe1\xc5I\xf5\x1c\xd3\xa7\xdd\xa0\x84j\x9bob\x9d"\xd8\xf7\x98?^\x9dA{\xde\x08\x8f\x84i\xbf\x1f\xab'
G = (926644437000604217447316655857202297402572559368538978912888106419470011487878351667380679323664062362524967242819810112524880301882054682462685841995367, 4856802955780604241403155772782614224057462426619061437325274365157616489963087648882578621484232159439344263863246191729458550632500259702851115715803253)

a = 726 
def f(x,y):
	return y**2 - x**3 - a*x  

fA = f(A[0], A[1])
fB = f(B[0], B[1])
fG = f(G[0], G[1])
p = gcd(fA - fB, fA - fG)
assert is_prime(p)
F = GF(p)
b = F(fA)
E = EllipticCurve(F, [a,b])
A = E(*A)
B = E(*B)
G = E(*G)
# oops G.order() == 11 :D 
for i in range(11):
	if i*G == A:
		priv_a = i
		break 
C = priv_a * B 
secret = C[0]

hash = sha256()
hash.update(long_to_bytes(int(secret)))

key = hash.digest()[16:32]
iv = b'u\x8fo\x9aK\xc5\x17\xa7>[\x18\xa3\xc5\x11\x9en'
cipher = AES.new(key, AES.MODE_CBC, iv)

flag = cipher.decrypt(ciphertext)
print(flag)