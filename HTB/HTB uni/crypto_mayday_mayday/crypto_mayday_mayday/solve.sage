from Crypto.Util.number import *
from math import ceil
from sage.all import *
from gmpy2 import iroot
N = 0x78fb80151a498704541b888b9ca21b9f159a45069b99b04befcb0e0403178dc243a66492771f057b28262332caecc673a2c68fd63e7c850dc534a74c705f865841c0b5af1e0791b8b5cc55ad3b04e25f20dedc15c36db46c328a61f3a10872d47d9426584f410fde4c8c2ebfaccc8d6a6bd1c067e5e8d8f107b56bf86ac06cd8a20661af832019de6e00ae6be24a946fe229476541b04b9a808375739681efd1888e44d41196e396af66f91f992383955f5faef0fc1fc7b5175135ab3ed62867a84843c49bdf83d0497b255e35432b332705cd09f01670815ce167aa35f7a454f8b26b6d6fd9a0006194ad2f8f33160c13c08c81fe8f74e13e84e9cdf6566d2f

e = 0x4b3393c9fe2e50e0c76920e1f34e0c86417f9a9ef8b5a3fa41b381355
m_dp = 0x59a2219560ee56e7c35f310a4d101061aa61e0ae4eae7605eb63784209ad488b4ed161e780811edd61bf593e2d385beccfd255b459382d8a9029943781b540e7
m_dq = 0x39719131fbfd8afbc972ca005a430d080775bf1a5b3e8b789aba5c5110a31bd155ff13fba1019bb6cb7db887685e34ca7966a891bfad029b55b92c11201559e5
ct = 0x17f2b5a46e4122ff819807a9d92b6225c483cf93c9804381098ecd6b81f4670e94d8930001b760f1d26bc7aa7dda48c9e12809d20b33fdb4c4dd9190b105b7dab42e932b99aaff54023873381e7387f1b2b18b355d4476b664d44c40413d82a10635fe6e7322543943aed2dcfbe49764b8da70edeb88d6f63ee47f025be5f2f38319611ab74cd5db6f90f60870ecbb57a884f821d873db06aadf0e61ff74cc7d4c8fc1e527dba9b205220c6707f750822c675c530f8ad6956e41ab80911da49c3d6a7d27e93c44ba5968f2f47a9c5a2694c9d6da245ceffe9cab66b6043774f446b1b08ee4739d3cc716b87c8225a84d3c4ea2fdf68143d09f062c880a870554

known = 2048 // 4 

P_kl = (2**(2*known) * e**2 * m_dp * m_dq ) // N + 1 
S_kl = (1 - P_kl * (N - 1)) % e 

delta = iroot(S_kl**2 - 4*P_kl, 2)
assert delta[1]
delta = delta[0]
k = (S_kl + delta) // 2 
l = S_kl - k 
assert k*l == P_kl
print(k)
print(l)
P.<x> = PolynomialRing(Zmod(k*N))
f = e*x + e * m_dp * 2**known + int(k) - 1
f = f.monic()
root = f.small_roots(X=2**known, beta = 0.4, epsilon=1/48)[0]
print(root)
# root = 10908744018287110451931298321496141320933954668176995730581764231097031478485946604676321521668477284486303180226484754893816680056105268796248411122315745
p = (e*root + e * m_dp * 2**known + int(k) - 1) // k 
q = N // p 
print(long_to_bytes(int(pow(ct,pow(int(e), -1, (p-1)*(q-1)), int(N)))))
