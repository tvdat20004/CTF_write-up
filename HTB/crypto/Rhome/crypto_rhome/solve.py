from sympy.ntheory import discrete_log
from Crypto.Cipher import AES
from hashlib import sha256
from Crypto.Util.number import long_to_bytes

p = 53421818650106665651246067188224069575038446131034319836287796106439601497662555056937624378124469474118670070831549551340001829137507978047452525290337133101930572499
g = 37405608844858464724151107054526819398359292513429120856808231271956429990805468693612542229244740053490109093029790351897353643440393444412354909643414636509620599479
A = 51427748477874009482055728467931889390513912938633982379425596849803065514167318780113033853193264811144749118624073050566326564201835003652454049581069506168118678360
B = 24781887708893929480877162115760791533628594209498152623803939925477530771911371888626701926318737761906247682302053381296331769751571627633274727508859631635562104878
encrypted = bytes.fromhex('e9fe8a082aa3a503a43d9317e2b6e0773f3a7a18192ad530f50028bd1abb2a7c')

# a = discrete_log(p, g, A)
b = discrete_log(p, B, g)
ss = pow(A, b, p)

key = sha256(long_to_bytes(ss)).digest()[:16]
flag = AES.new(key, AES.MODE_ECB).decrypt(encrypted)
print(flag)