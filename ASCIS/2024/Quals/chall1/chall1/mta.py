import paillier

from secrets import randbelow
from ecc import q, G, PointJacobi
from alice_proof import ProveAliceRange, ProofAlice, VerifyAlice
from bob_proof import ProveBob, ProofBob, VerifyBob


def round1(
    pkA: paillier.PublicKey,
    a: int,
    NTildeB: int,
    h1B: int,
    h2B: int
):
    cA, rA = pkA.Encrypt(a)
    pf = ProveAliceRange(pkA, cA, NTildeB, h1B, h2B, a, rA)
    return cA, pf


def round2(
    Session: bytes,
    pkA: paillier.PublicKey,
    pf: ProofAlice,
    b: int,
    cA: int,
    NTildeA, h1A, h2A,
    NTildeB, h1B, h2B,
    B: PointJacobi
):
    if not VerifyAlice(pf, pkA, NTildeB, h1B, h2B, cA):
        raise Exception("RangeProofAlice.Verify() returned false")
    q5 = q**5
    betaPrm = randbelow(q5)
    cBetaPrm, cRand = pkA.Encrypt(betaPrm)
    cB = pkA.HomoMult(b, cA)
    cB = pkA.HomoAdd(cB, cBetaPrm)
    beta = -betaPrm % q
    piB = ProveBob(
        Session,
        pkA,
        NTildeA, h1A, h2A,
        cA, cB,
        b,
        betaPrm,
        cRand,
        B
    )
    return (beta, cB, betaPrm, piB)


def round3(
    Session: bytes,
    pkA: paillier.PublicKey,
    pf: ProofBob,
    B: PointJacobi,
    NTildeA, h1A, h2A,
    cA: int, cB: int,
    sk: paillier.PrivateKey,
):
    if not VerifyBob(pf, Session, pkA, NTildeA, h1A, h2A, cA, cB, B):
        raise Exception("ProofBob.Verify() returned false")

    alphaPrm = sk.Decrypt(cB)
    return alphaPrm % q


if __name__ == "__main__":
    from Crypto.Util.number import *
    # paillier key A
    _p = getPrime(1024)
    _q = getPrime(1024)
    pk = paillier.PublicKey(_p * _q)
    sk = paillier.PrivateKey(_p, _q)

    NTildeA = 20198128794569395106492944161421684358823637633153355203650944255172505209500255717609392074458778183383142840316487102940691613814337184199088362222147970665080184808405154896367854096731363263872263761806052463322253248436315702643294299475474188294992634792068990104047323115809798976198970926199612834907936155247586571948778743860780477152993667889095425124271788465315836997400730001008949584099775590629382262718969726117658002758196127901912685728700289844597653819569603400262351364253298005576658756668562475886646653174983541345502280827830123764298237411316975909774201171288683352260825902172146795200251
    phi = 20198128794569395106492944161421684358823637633153355203650944255172505209500255717609392074458778183383142840316487102940691613814337184199088362222147970665080184808405154896367854096731363263872263761806052463322253248436315702643294299475474188294992634792068990104047323115809798976198970926199612834907936155247586571948778743860780477152993667889095425124271788465315836997400730001008949584099775590629382262718969726117658002758196127901912685728700289844597653819569603400262351364253298005576658756668562475886646653174983541345502280827830123764298237411316975909774201171288683352260825902172146795200250
    phi //= 2
    h1A = 4
    assert phi % 2 == 1
    assert pow(h1A, phi, NTildeA) == 1
    xi = randbelow(NTildeA)
    h2A = pow(h1A, xi, NTildeA)

    NTildeB = 20198128794572047398059046800657931427203985062045251760936172533864221560669653106445667691978831076298048953188668736235852917296765355504469613297390220570572902517942048385939574361277238435184771455821873082855370244601994919025145871408553267186799875788171848261947368863491518895283097500946816313153189029095800368344242150862360965399672107170707791143648454115018067459502021930311570770374142885328620441215508381811424175550149099897143415601932965619041092782150339862245487195559831433375075315943748906761998355474770238025562778449601492882937496116496725747679394623107966359733545334415547832452947
    phi = 20198128794572047398059046800657931427203985062045251760936172533864221560669653106445667691978831076298048953188668736235852917296765355504469613297390220570572902517942048385939574361277238435184771455821873082855370244601994919025145871408553267186799875788171848261947368863491518895283097500946816313153189029095800368344242150862360965399672107170707791143648454115018067459502021930311570770374142885328620441215508381811424175550149099897143415601932965619041092782150339862245487195559831433375075315943748906761998355474770238025562778449601492882937496116496725747679394623107966359733545334415547832452946
    phi //= 2
    h1B = 4
    assert phi % 2 == 1
    assert pow(h1B, phi, NTildeB) == 1
    xj = randbelow(NTildeB)
    h2B = pow(h1B, xj, NTildeB)
    print("Start")

    a = randbelow(q)
    b = randbelow(q)
    gBPoint = b * G
    print(f"{a = }")
    print(f"{b = }")

    cA, pf = round1(pk, a, NTildeB, h1B, h2B)

    beta, cB, betaPrm, pfB = round2(
        b"hello",
        pk, pf, b, cA, NTildeA, h1A, h2A, NTildeB, h1B, h2B, gBPoint
    )

    alpha = round3(
        b"hello",
        pk, pfB, gBPoint, NTildeA, h1A, h2A, cA, cB, sk
    )

    # expect: alpha = ab + betaPrm
    aTimesBPlusBetaModQ = (a * b + betaPrm) % q
    assert aTimesBPlusBetaModQ == alpha
