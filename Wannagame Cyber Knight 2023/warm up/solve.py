n1 = 211455521422020258783290017786833203694890601609542266572436689343387975873851663714826878488933573192758684466992443467575547666866148922830759132550414787179476403839100558419435557761636689850531979449862710134176010990573930089590543054663710498337567392413667902039363909716461423780921274784964048201261615244456563
e1 = 65537
c1 = 155418209978735408945517158166215780665415976629503903289584371825469697474469343720429315161504813773884932054871475346668022365253354309172510206853178681311268276851307960534785621244053849034169181072159335358550066055001840012695163671358539407821466685911438264884558726042393234252026079141088412007925402309181305
n2 = 1556419694977074420750239158897899631469826483957603939360368802327653630130981740036704150568796140290764000336428428488285423441865456015063486859824968187861539255264172310760537054139580128911600222858752984388304888111133106642922872407380377205772921378334031465881260979584977844288646384759864854775319523643613669692525031061599635491191498349

e2 = 65537
c2 = 814853698863591711616294956238631732573315851128484059387714793653181142383960479109157116069042282680832432053035109228714088507195567442154173032565469226942472090529328452132107943811408737294966578597692504678621473678055677609726740706850101983317960048448310998482312534333138456629762423325180613370693789240335308211213919600203990152520269025
n3 = 3993193907009943655630571031029488807651266438317568663483791746675374480884841475846941780549436733527157152622547743749865993415756807272582234085567951844648680787553253234423625845487826860988553995685527888492246204541421972864421335071765915451441830451498783420498130746986190652474314925189790891632266843591316211442273150964679169025504263980998481563244440787983555826067831717381311713782245979706619729054780078140296347468352791645492038792748920064037539868854753851135845319699845278305219332816250661827780267748573080430881938636610669022125346981839219169743131435780102335356123362116245634666019
e3 = 65537
c3 = 3038260918139845903074652597748841639455687273919226184257585711899516866664647973911092701304989844742443789090639605869993114311780464276426644555372038897779711647654834593931443264191893734612861453608801393950275435588799921767292542465787248532376276920658237311699672046201586224320506731637656286323866642053860452092904286129575302841341060886728622409806032791873719801623552252933762835350644368024272122563384527013406586202093124271242114121604135749274213770981572917875049020014649835636798619380796309394877135974984198332443434780773175200892355325975094655738946378919412649188846687302492873166182

from Crypto.Util.number import *
from math import floor
# from sage.all import *
from tqdm import tqdm
from sympy import primerange
# ----part1----
def f(can):
	p = can 
	q = p + int(str(p), 12) + 1
	return p*q

l = 2**511
r = 2**512

while True:

	candidate = floor((l+r)//2)
	# print(candidate)
	if candidate >= 2**512:
		break
	if f(candidate) == n1:
		p1 = candidate
		q1 = n1//p1 
		break
	elif f(candidate) < n1:
		l = candidate + 1 
	else:
		r = candidate - 1

assert p1*q1 == n1 and isPrime(p1) and isPrime(q1)

d = pow(65537,-1,(p1-1)*(q1-1))
part1 = long_to_bytes(pow(c1,d,n1))
print(part1)

# ---part2---
ok = bytes_to_long(b'd4rkn19ht_w4s_h3r3')
def isqrt(n):
    x = n
    y = (x + n // x) // 2
    while y < x:
        x = y
        y = (x + n // x) // 2
    return x


def fermat(n):
    a = isqrt(n)
    b2 = a*a - n
    b = isqrt(n)
    count = 0
    while b*b != b2:
        a = a + 1
        b2 = a*a - n
        b = isqrt(b2)
        count += 1
    p = a+b
    q = a-b
    assert n == p * q
    return p, q
n = n2 * ok 

p2, q2 = fermat(n)
q2 = q2 // ok 
assert p2*q2 == n2
part2 = long_to_bytes(pow(c2,pow(65537,-1,(p2-1)*(q2-1)),n2))
print(part2)

# ---part3---

def polard_p_1(n, bound, max_exponent = None):
	if not max_exponent:
		max_exponent = 100 # choose bigger if u want
	prime = list(primerange(0,bound))
	m = 2
	for p in tqdm(prime):
		m = pow(m,pow(p,max_exponent),n)
		g = GCD(m - 1, n)
		if 1 < g < n:
			return g

# p3 = polard_p_1(n3,2**18)
# it takes me 5m 55s to calculate p3 :) so i enter its value for saving time :v
p3 = 34302378001524268765721972889612653650983341291105371564207304500444850849226646030402506299652849180254819837296965711073149728603386400320040960818141113159855391067137019913846389938820834584083933687632175802958740132807718353391277806953920781509000521492461678009894860124162620619971833231615146852679
q3 = n3//p3
assert n3 == p3*q3
print(p3)
print(q3)
part3 = long_to_bytes(pow(c3,pow(65537,-1,(p3-1)*(q3 - 1)),n3))
print(part3)
print(part1 + part2 + part3)
