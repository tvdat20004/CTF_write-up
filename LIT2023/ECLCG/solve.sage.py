

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2029673067800379268 = Integer(2029673067800379268); _sage_const_1814239535542268363 = Integer(1814239535542268363); _sage_const_602316613633809952 = Integer(602316613633809952); _sage_const_1566131331572181793 = Integer(1566131331572181793); _sage_const_2525114415681006599 = Integer(2525114415681006599); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_916472720818205535 = Integer(916472720818205535); _sage_const_1673271260266693096 = Integer(1673271260266693096); _sage_const_16 = Integer(16)

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2029673067800379268 = Integer(_sage_const_2029673067800379268 ); _sage_const_1814239535542268363 = Integer(_sage_const_1814239535542268363 ); _sage_const_602316613633809952 = Integer(_sage_const_602316613633809952 ); _sage_const_1566131331572181793 = Integer(_sage_const_1566131331572181793 ); _sage_const_2525114415681006599 = Integer(_sage_const_2525114415681006599 ); _sage_const_1 = Integer(_sage_const_1 ); _sage_const_2 = Integer(_sage_const_2 ); _sage_const_3 = Integer(_sage_const_3 ); _sage_const_0 = Integer(_sage_const_0 ); _sage_const_916472720818205535 = Integer(_sage_const_916472720818205535 ); _sage_const_1673271260266693096 = Integer(_sage_const_1673271260266693096 ); _sage_const_16 = Integer(_sage_const_16 )# from sage.all import *
from Crypto.Cipher import AES
from Crypto.Util.number import long_to_bytes as l2b
from Crypto.Util.Padding import pad

x0 = _sage_const_2029673067800379268 
y0 = _sage_const_1814239535542268363 
x1 = _sage_const_602316613633809952 
y1 = _sage_const_1566131331572181793 
p = _sage_const_2525114415681006599 
iv = bytes.fromhex('6959dbf6bf22344d452c3831a3b68897')
enc = bytes.fromhex('a490e177c3838c8f24d36be5ee10e0c9e244ac2e54cd306eddfb0d585d5f27535835fab1cd83d26a669e6c08096b58cc4cc4cb082f4534ce80fab16e21f119adc45a5f59d179ca3683b77a942e4cf4081e01d921a51ec3a3a48c13f850c04b80c997367739bbde0a5415ff921d77a6ef')

F = GF(p)
coeff = Matrix(F,[[x0,_sage_const_1 ],[x1,_sage_const_1 ]])
df = vector(F, [y0**_sage_const_2  - x0**_sage_const_3 , y1**_sage_const_2  - x1**_sage_const_3 ])
[a,b] = coeff  * BackslashOperator() * df
print(a,b)
# assert int(y1**2 - (x1**3 + int(a)*x1 + int(b))) % int(p) == 0
E = EllipticCurve(F, [a,b])
X0 = E(x0,y0)
X1 = E(x1,y1)
G = E.gens()[_sage_const_0 ]
# kp = G.discrete_log(X0)
# kq = G.discrete_log(X1)
kp = _sage_const_916472720818205535 
kq = _sage_const_1673271260266693096 
# kp = a + b
# kq = b + a(a+b) = b + a*kp
order = E.order()
coeff = matrix(Zmod(order),[[_sage_const_1 ,_sage_const_1 ], [kp,_sage_const_1 ]])
df = vector([kp,kq])
[a,b] = coeff  * BackslashOperator() * df
v = int((G*int(b) + int(a)*X1).xy()[_sage_const_0 ])
k = pad(l2b(v**_sage_const_2 ), _sage_const_16 )
cipher = AES.new(k, AES.MODE_CBC, iv=iv)

flag = cipher.decrypt(enc)
print(flag)


