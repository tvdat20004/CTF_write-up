ciphertext
print(len(ciphertext))
def handle(letter):
    cp = 19
    cp_length = 5
    bin_letter, rem = letter, letter * 2**(cp_length - 1)
    while (rem.bit_length() >= cp_length):
        first_pos = rem.bit_length()
        rem = rem ^ (cp << (first_pos - cp_length))
    return rem
flag = ''
for i in range(0, len(ciphertext), 12):
    chunk = int(ciphertext[i:i+12],2)
    for pos in range(12):
        recovered_chunk = format(chunk ^ (2**pos), "012b")
        letter, rem = int(recovered_chunk[:8],2), int(recovered_chunk[8:], 2)
        if rem == handle(letter):
            flag += chr(letter)
            break
print(flag)

# bcactf{yumMY-y311OWC4ke-x7CwKqQc5fLquE51V-jMUA-aG9sYS1jb21vLWVzdGFz}
