

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_48743250780330593211374612602058842282787459461925115700941964201240170956193881047849685630951233309564529903 = Integer(48743250780330593211374612602058842282787459461925115700941964201240170956193881047849685630951233309564529903); _sage_const_11424424906182351530856980674107667758506424583604060548655709094382747184198 = Integer(11424424906182351530856980674107667758506424583604060548655709094382747184198); _sage_const_19733537947376700017757804691557528800304268370434291400619888989843205833854285488738413657523737062550107458 = Integer(19733537947376700017757804691557528800304268370434291400619888989843205833854285488738413657523737062550107458); _sage_const_1 = Integer(1); _sage_const_1000 = Integer(1000)# from sympy.ntheory.residue_ntheory import discrete_log
from Crypto.Util.number import long_to_bytes
# from math import gcd
M = _sage_const_48743250780330593211374612602058842282787459461925115700941964201240170956193881047849685630951233309564529903 
sus = _sage_const_11424424906182351530856980674107667758506424583604060548655709094382747184198 
a = _sage_const_19733537947376700017757804691557528800304268370434291400619888989843205833854285488738413657523737062550107458 

R = Integers(M)
exp=pow(sus,-_sage_const_1 ,M)
exp = R(exp)
sus = R(sus)
t1 = exp.log(sus)

t2 = t1 + _sage_const_1  
a_inv = pow(a,-_sage_const_1 ,M)
for i in range(_sage_const_1000 ):
    t = t1 + t2*i
    inverted_flag = ((t*a_inv)%M)
    
    flag = long_to_bytes(int(pow(inverted_flag,-_sage_const_1 ,M)))
    
        
    if b"flag" in flag:
        print((flag))
        break

