q,g,h,c1,c2 = (7392891552378266993383784727711545677649277785952143287521441521655911331066078430889373152367894298000811603267452653249500761615951487677402191728640001, 7, 3952489400936860797284972123409665007249849982401436865490873396838739979240217282433761921100701496640581376034401743648518672775374630603862135414010211, 2612161276901162806875851907128301255155601713477914915147660384231271329986453637839141271130876522374027191732183079178092093200403504108770995700122778, 6949373462616778103744106340023772164776075906422503284748318699509429287603544247719607812291619439423067891157446827726559529029260193638882472365720997)
# from sage.all import ,
from sympy.ntheory import discrete_log
from math import prod
from Crypto.Util.number import long_to_bytes
# print(discrete_log(q, c1, g))
factor = [2 , 3 , 5, 11, 23, 29 , 31 , 89 , 971 , 1097 , 1451 , 1609 , 1831, 12697 , 15187 , 22511 , 34487 , 41149 , 72211 , 950879 , 6208387 , 30724571 , 163664561 , 18309296483 , 21610306037 , 3297699832871 , 48294815469569 , 307878254219957]

order = prod(factor[:len(factor) - 5])
print(order)
exp = q // order
g_ = pow(g, exp, q)
h_ = pow(h, exp, q)
x = discrete_log(q, h_, g_)
print(x)


while True:
	s = pow(c1,x,q)
	m = c2 * pow(s,-1,q) % q
	if b'ASCWG' in long_to_bytes(m):
		print(long_to_bytes(m))
		break
	x += order
# 36514016671196979521617339639923164316867929191236977913838925131711221876416970
# 8285612213311373810740785881528455659108831474249736143651122916560473352900
# b'ASCWG{H0w_5m0o0zy_E1G4m4l_c@n_B3_f6eb9c84}'
