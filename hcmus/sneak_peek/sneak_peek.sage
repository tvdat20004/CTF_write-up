n = 137695652953436635868173236797773337408441001182675256086214756367750388214098882698624844625677992374523583895607386174643756159168603070583418054134776836804709359451133350283742854338177917816199855370966725059377660312824879861277400624102267119229693994595857701696025366109135127015217981691938713787569
peek = 6745414226866166172286907691060333580739794735754141517928503510445368134531623057 # p >> 240
c = 60939585660386801273264345336943282595466297131309357817378708003135300231065734017829038358019271553508356563122851120615655640023951268162873980957560729424913748657116293860815453225453706274388027182906741605930908510329721874004000783548599414462355143868922204060850666210978837231187722295496753756990

from Crypto.Util.number import long_to_bytes
P.<x> = PolynomialRing(Zmod(n))
a = peek * 2^240
f = a + x
r = f.small_roots(X = 2^241, beta = 0.5, epsilon = 1/64)
p = int(r[0] + a)
q = int(n) // int(p)
assert n == p*q
d = pow(65537,-1,(p-1)*(q-1))
print(long_to_bytes(int(pow(c,d,n))))
# b'HCMUS-CTF{d0nt_b3_4n_3XhiB1ti0ni5t_0r_y0uLL_g3t_eXp0s3d}'

